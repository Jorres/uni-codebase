Машина Тьюринга - некоторый формализм высокого уровня для языков

Состоит из автомата
И ленты. 
По текущему состоянию:
    - переход в новое состояние
    - можно записать символ в ячейку на ленте
    - можно сдвинуться на 1 символ влево, вправо 

МТ - это как автомат с магазинной памятью
Только у автомата с магазинной памятью был стек, а
у нас будет как бы вектор.

Машина Тьюринга - это как программа. Она описывается конечным (!) количеством информации. 

Допуск для машины Тьюринга - это если встать в стартовое положение
на ленте, походить по переходам и после обработки придем ли в завершающее
состояние?

МТ = {Q, SIGMA, GAMMA, q_0, B, T, delta}

Q - множество состояний
SIGMA - входной ленточный алфавит
GAMMA - ленточный алфавит, SIGMA \in GAMMA
q_0 - стартовое состояние
B - пробельный символ, B \in (GAMMA \ SIGMA)
    нужен, чтобы отличить концы информации на бесконечной
    в обе стороны ленте. Если дошли до него, вход закончен. 
T - множество терминальных состояний
    если мы хотя бы раз пришли в терминальное состояние, значит,
    слово допускаем. Некоторый эквивалент return 1, программа дальше
    не выполняется. Можно использовать несколько, можно даже 
    использовать недопускающие состояния.
delta - функция переходов. Сигнатура сложная:
    <Q x GAMMA> -> <Q_new x GAMMA_new x action in {left, right, here}>
Можно показать, что детерминированная машина Тьюринга имеет ту же 
мощность, что и недетерминированная. Существуют преобразования. 

Какое отношение имеет МТ к компьютерам? Это почти Brainfuck))

Если говорить про ассемблер, то МТ - это "как будто" указатель на 
текущую строчку (состояние) + состояние всех регистров (лента)
// тут обойден вопрос произвольного доступа к регистру, но
// видимо это исправимо

К чему идем? Машина Тьюринга может задавать все перечислимые языки.
Как и все современные языки программирования)

Ну насколько я вообще понимаю, машина Тьюринга - это некоторая минимизация возможностей программиста
Дескать, а урежьте все себе возможности до такой степени, чтобы все еще было можно написать все, что раньше
Интерес - снова научиться понимать, правда ли, что некоторые возможности - одно и то же

Мгновенное описание МТ - некоторая строчка. Сериализация МТ, так сказать
Cтрочка над алфавитом GAMMA x SPEC_SYMBOL_FOR_Q
                      B00101001010Q1001010101010B                                         
                      На таких мгновенных описаниях можно ввести отношение "переходит за один шаг".
За один шаг у МТ меняется локальное изменение.

МТ допускает слово, если из МО стартового "Bw1q0w2..wk" достижимо любое мгновенное состояние \in T

Модификации МТ:

Многодорожечные машины Тьюринга - общий указатель на дорожки                     I         
                                                                        ---------I-------- 
delta: Q x GAMMA^k -> Q X GAMMA^k X {<- -> |}                                    0101010010
Это, по факту, одноленточная МТ, т.к. можно переопределить алфавит      ---------I-------- 
                                                                                 I         
                                                                        ---------I-------- 
                                                                        ---------I-------- 
Многоленточная - это когда по указателю на дорожку. За один переход КАЖДЫЙ указатель ведет себя
независимо.  Что дописать на каждую дорожку, и в какую сторону сдвинуть указатель на каждой дорожке. 

Cведение многоленточной к многодорожечной:

Новый алфавит - GAMMA_NEW = GAMMA x {yes, no} - есть ли указатель в такой клетке на каждой дорожке
1) сдвинемся до упора влево, на всех позициях написан B
2) просканируем слева направо, запоминаем, какие символы стоят под каждым указателем
Это GAMMA ^ k информации

3) мы знаем, какой переход многоленточная МТ должна сделать
бежим одним указателем справа налево, двигаем вправо-влево все бегунки 

Можно также обрубить бесконечность в одну сторону. Вместо одной ленты сделать две, представить, что одна - это луч 
в плюс бесконечность, а вторая - в минус бесконечность. 
  
                                   -----------Cтековая машина-----------

     Конечный автомат, у каждого под управлением k стеков. Как автомат с магазинной памятью, но лучше
     Утверждение. 1-стековая машина (автомат с магазинной памятью) распознает контекстно-свободные языки
     Утверждение. 2-стековая машина эквивалентна Машине Тьюринга

     k-стековая машина сводится к k-ленточной машине Тьюринга

                                   ----------Cчетчиковая машина---------

     Автомат, k чисел. +-1 к каким-то счетчикам и проверить на ноль. 
     Это сводится к k-стековой. 
     1 счетчик не мощнее, чем один стек. 
     2 счетчика - оказывается, что это Машина Тьюринга))
        Доказательство: 
            1) 2 стека <=> 3 счетчика
               (осторожно! операции только +-1 и ==0)
               каждый стек покодируем одним числом X. Каждый элемент стека - цифра от 1 до |GAMMA|. 
               посмотреть на вершине - X % |GAMMA|
               удалить на вершине - X \ |GAMMA|
               положить - умножить на r и доплюсовать
            2) 3 счетчика в 2 счетчика
               (i, j, k) => (x, y)
               (i, j, k) => 2^i + 3^j + 5^k
               теперь i++ переходит в умножение на 2
