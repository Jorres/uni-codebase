_                           _
L(z) = (I - z * A) ^ (-1) * Q


seq(A) = 1 / (1 - A(z))
mset(A) = mult_1_inf(1 - z^i)^(-a_i)

по автомату строится произв. функция, пишутся
                seq() = (*),
                * = concat,

но так выйдет только для ДКА, НКА придется пересобрать в ДКА


Задача про несодержание паттерна
S - строки, не сод. п
T - строки, сод. п. только в конце
1) eps + S * SIGMA = S + T
2) S * {п} = T + те строчки, которые содержат п более 1 раза

Автокорреляционный многочлен для 001100
    001100        +
     001100
      001100
       001100
        001100    +
         001100   +
    С(z) = 1 + z^4 + z^5

Для п = 001100 и алф = {0, 1} второе уравнение выглядит так: S * {п} = T + T * {1100} + T * {01100}
                                                                      z^0     z^4           z^5

Трансляция 1 и 2 уравнения в пф
1) 1 + m * z * S(z) = S(z) + T(z), где m - мощность алфавита
2) S(z) * z^k = T(z) * C(z)
Решение на S(z):

S(z)   =      C(z)
          ------------
     z^k + (1 - m * z) * C(z)

 =====================================================
                        Разбиения на слагаемые
 =====================================================

 let I = {1, 2, 3, 4, ...} => ПФ(I) = z / (1 - z)

 Seq(I) - упорядоченные разбиения на слагаемые - (1 - z) / (1 - 2 * z)
 MSet(I) - стандартные разбиения, отсортированные в каком-то смысле, юзаем mset и получаем 1 / mult_1_inf(1-z^i)
 Set(I), кстати, разбиение на различные слагаемые


Пентагональная теорема Эйлера
В mult_1_inf(1 - z^i) коэффициенты при каждом  z^n -1, 0, 1

А именно
mult_1_inf(1 - z^i) = sum_-inf_inf(-1^n * z ^ (3n^2 + n)/2) = 
1 + sum_1_inf((-1)^n * [z^(3n^2 + n)/2 + z^(3n^2-n)/2])


Экспоненциальные производящие функции
нужны для помеченных комбинаторных объектов

1) сумма определена так, как в обычных
2) произведение: С = А *** В
в чем проблема 
А = {1, 2}, B = {1, 2, 3}, A x B = {1, 2 : 1, 2, 3}
У нас одинаковая нумерация.
А надо перенумеровать, чтобы пометки не повторялись
Пусть наш оператор звездочек делает так:
    B- составляет все пары из объектов
    - пытается их по разному перенумеровать
Тогда для А *** В:
    {1, 2 : 1, 2, 3} - просто пара
    {1, 2 : 3, 4, 5} - первая возможная пара
    {1, 2 : 3, 5, 4} - не может получиться, т.к давайте договоримся,
    что новый выданный порядок идет в том же относительном порядке,
    что и старый
    Зато, видимо, не запрещено вот что
    {2, 4 : 1, 3, 5}

A *** B = C, where c_n = sum_1_inf{a^k * b^(n - k) * C_n_k} = 
sum_1_inf{a^k * b^(n - k) * n! / k! / (n - k)!} =>
 c_n / n! = sum{a^k * b^(n - k) / k! / (n - k)!}

вот, у нас сам по себе определился оператор умножения эксп произв функций


B = Seq_k(A);

b_n = sum(t1 + t2 + t...k = n){c(n, t1) * c(n - t1, t2) * ... * c(tk, tk) * 
                              a_t1 * a_t2 * ... * a_tk}

Мультиномиальные коэффициенты
произведение цешек сокращаются телескопически и будет n! / t1! / t2! / ... / tn!

B(s) = (A(s))^k = seq_k(A(s))

Сдвиги
влево - дифференцирование
вправо - интегрирование 

Подстановка
A(B(S)) = sum(B^n * a^n / n!)

физический смысл подстановки
все атомы из А заменяются на всевозможные объекты из B
A(B(s))_n = sum_0_n(a_k * sum_{t1+t2+t3...=n}(c(n, t1, t2, t..n) * b1 * b2 * b3...))


Теперь экзотика.
Урны - шарики от 1 до n лежат в урне веса n, различных урн веса n одна
(1, 1, 1...) в терминах эпф = sum(1 * s^n / n!) = e^s = A(s)
В частности, поэтому и называется экспоненциальная.

Set_k(B) - ? Одному сету соответствует ровно k! последовательностей
Мультисет и сет в помеченном мире - одно и то же.
Последовательностей существует B(s)^k, значит, сетов B(s)^k / k!

Set_anylength(B) = sum_k B(s)^k * s^k / k! = e^(B(s)), оч просто


Циклы
A = cyc(B) - ориентированная циклическая последовательность  
Циклу длины а соотв. а помеченных последовательностей
последовательность можно превратить в цикл, начав с определенного

Отсюда cyc_k(B) = k * seq_k(B)
для базовых циклов - просто из перестановок - будет n!/n = (n-1)/!

ЭПФ для базовых циклов sum(c_n * s^n / n!) = sum(s^n / n) bad(((
принято считать, что циклов нулевой длины 0

Циклы для произв множества: sum(B(s)^n / n);
-log(1-s) - произв функция для такого. Как-то построили.
  ==
log(1/(1-s))

Забавный факт: перестановки - это множества циклов


Сколько помеченных циклов нечетной длины?
