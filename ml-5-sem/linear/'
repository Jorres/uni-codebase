#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

using calc = double;

const int ITERATIONS = 900000;
const int BATCH_SIZE = 20;
const calc STEP = 1e-7;

calc loss_der(calc val) {
    return val;
}

vector<calc> do_descent(int n, int m, const vector<vector<calc>>& data, const vector<calc>& real_ans) {
    int am = m + 1;
    vector<calc> w(am, 0);
    int cur_obj = 0;
    for (int i = 0; i < ITERATIONS; i++) {
        vector<calc> diffs_accum(am, 0);
        for (int j = 0; j < BATCH_SIZE; j++) {
            calc ans = 0;
            for (int k = 0; k < am; k++) {
                ans += w[k] * data[cur_obj][k];
            }
            calc diff = ans - real_ans[cur_obj]; 
            for (int k = 0; k < am; k++) {
                diffs_accum[k] += loss_der(diff) * data[cur_obj][k];
            }
            cur_obj = (cur_obj + 1) % n;
        }
        for (int k = 0; k < am; k++) {
            w[k] -= diffs_accum[k] * STEP;
        }
    }
    return w;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    freopen("input.txt", "r", stdin);

    int n, m;
    cin >> n >> m;
    int am = m + 1;
    vector<vector<calc>> data(n, vector<calc>(am, 0));
    vector<calc> real_ans;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < am; j++) {
            cin >> data[i][j];
        }
        real_ans.push_back(data[i][m]);
        data[i][m] = 1;
    }

    vector<calc> w = do_descent(n, m, data, real_ans);
    for (auto wi : w) {
        cout << fixed << setprecision(15) << wi << '\n';
    }
}
